'''  stex naxoroq hashvac matricy enq ogtagrocum vor xusapenq mekic avel tarrery hamematelu hamar
.'''

def compute_lps(pattern):
    lps = [0] * len(pattern)
    length = 0
    i = 1

    while i < len(pattern):
        if pattern[i] == pattern[length]:
            length += 1
            lps[i] = length
            i += 1
        else:
            if length != 0:
                length = lps[length - 1]
            else:
                lps[i] = 0
                i += 1

    return lps

def kmp_search(text, pattern):
    lps = compute_lps(pattern)
    i = 0 
    j = 0 

    while i < len(text):
        if pattern[j] == text[i]:
            i += 1
            j += 1

        if j == len(pattern):
            print(f"index {i - j}")
            j = lps[j - 1]
        elif i < len(text) and pattern[j] != text[i]:
            if j != 0:
                j = lps[j - 1]
            else:
                i += 1

'''A (0): chka -> lps[0] = 0
AB (1): chka -> lps[1] = 0
ABA (2): ka A -> lps[2] = 1
ABAB (3): ka AB -> lps[3] = 2
ABABC (4):chak -> lps[4] = 0
ABABCA (5): ka A -> lps[5] = 1
ABABCAB (6): ka AB -> lps[6] = 2
ABABCABA (7): ka ABA -> lps[7] = 3
ABABCABAB (8):ka ABAB -> lps[8] = 4'''
text = "ABABDABACDABABCABAB"
pattern = "ABABC"
kmp_search(text, pattern)
